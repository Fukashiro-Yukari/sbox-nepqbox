
@BaseClass = BaseProperties_sbox_nepqbox
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// BalloonEntity
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Physics ) model() = ent_balloon : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// BouncyBallEntity
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Physics ) model() = ent_bouncyball : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// DirectionalGravity
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Physics ) model() = directional_gravity : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// DroneEntity
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Physics ) model() = ent_drone : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// LampEntity
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Lighting ) editormodel( "models/editor/spot", lightModeTint, "0 255 192", "255 64 64" ) leansphere( "lightsourceradius" ) light() lightcone() = ent_lamp : ""
[
	enabled(boolean) : "Enabled" : 1 : ""
	color(color255) : "Color" : "255 255 255" : ""
	brightness(float) : "Brightness" : 1 : ""
	range(float) : "Range" : 512 : "Distance range for light. 0=infinite"
	falloff(float) : "Falloff" : "1" : "Angular falloff exponent. Does not work with light cookies. Does not work with dynamic lighting."
	attenuation1(float) { group = "Rendering" } : "Linear Attenuation" : 0 : ""
	attenuation2(float) { group = "Rendering" } : "Quadratic Attenuation" : 1 : ""
	innerconeangle(float) : "Inner Cone Angle" : 45 : "Inner cone angle. No angular falloff within this cone."
	outerconeangle(float) : "Outer Cone Angle" : 60 : "Outer cone angle."
	fademindist(float) { group = "Fade Distance" } : "Fade Distance Min" : -250 : "Distance at which the light starts to fade. (less than 0 = use 'Fade Distance Max')"
	fademaxdist(float) { group = "Fade Distance" } : "Fade Distance Max" : 1250 : "Maximum distance at which the light is visible. (0 = don't fade out)"
	shadowfademindist(float) { group = "Shadows" } : "Shadow Start Fade Dist" : -250 : "Distance at which the shadow starts to fade. (less than 0 = use 'Shadow End Fade Dist')"
	shadowfademaxdist(float) { group = "Shadows" } : "Shadow End Fade Dist" : 1000 : "Maximum distance at which the shadow is visible. (0 = don't fade out)"
	lightcookie(resource:vtex) : "Light Cookie" :  : ""
	fog_lighting(choices) : "Fog Lighting" : 0 : "Volumetric Fogging - How should light interact with volumetric fogging." =
	[
		0 : "None"
		1 : "Baked"
		2 : "Dynamic"
		3 : "Baked No Shadows"
		4 : "Dynamic No Shadows"
	]
	fogcontributionstrength(float) : "Fog Stength" : "1" : "Overrides how much the light affects the fog. (if enabled)"
	castshadows(choices) { group = "Shadows" } : "Cast Shadows" : 1 : "Whether this light casts shadows." =
	[
		0 : "No"
		1 : "Yes"
		2 : "Baked Only"
	]
	nearclipplane(float) { group = "Shadows" } : "Shadow Near Clip Plane" : "1" : "Distance for near clip plane for shadow map."
	shadowtexturewidth(integer) { group = "Shadows" } : "Shadow Texture Width" : 0 : "0 = use default texture resolution"
	shadowtextureheight(integer) { group = "Shadows" } : "Shadow Texture Height" : 0 : "0 = use default texture resolution"
	rendertocubemaps(boolean) { group = "Rendering" } : "Render To Cubemaps" : 1 : "If true, this light renders into baked cube maps."
	priority(integer) { group = "Rendering" } : "Priority" : 0 : "When the number of visible lights exceeds the rendering budget, higher priority lights are chosen for rendering first."
	lightgroup(string) { group = "Rendering" } : "Light Group" :  : "Semicolon-delimited list of light groups to affect."
	lightsourceradius(float) { group = "Rendering" } : "Light Source Radius" : "2" : "The radius of the light source in game units."
	baked_light_indexing(boolean) { group = "Rendering" } : "Baked Light Indexing" : 1 : "Allows direct light to be indexed if baked. Indexed lights have per-pixel quality specular lighting and normal map response."
	pattern(string) { group = "Style" } : "Pattern" :  : "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
	style(choices) { group = "Style" } : "Style" : 0 : "" =
	[
		0 : "Normal"
		1 : "Flicker A"
		2 : "Slow Strong Pulse"
		3 : "Candle A"
		4 : "Fast Strobe"
		5 : "Gentle Pulse"
		6 : "Flicker B"
		7 : "Candle B"
		8 : "Candle C"
		9 : "Slow Strobe"
		10 : "Fluorescent Flicker"
		11 : "Slow Pulse No Black"
	]
	renderdiffuse(boolean) { group = "Rendering" } : "Render Diffuse" : 1 : "Whether the light should affect diffuse surfaces."
	renderspecular(choices) { group = "Rendering" } : "Render Specular" : 1 : "Whether the light should be visible in specular reflections." =
	[
		0 : "Off"
		1 : "On"
		2 : "Bake Into Cubemaps"
	]
	rendertransmissive(boolean) { group = "Rendering" } : "Render Transmissive" : 1 : ""
	directlight(choices) : "Direct Light" : 1 : "How direct lighting should be represented" =
	[
		0 : "None"
		1 : "Baked"
		2 : "Per Pixel"
	]
	indirectlight(choices) : "Indirect Light" : 1 : "How indirect lighting should be represented" =
	[
		0 : "None"
		1 : "Baked"
	]
	bouncescale(float) : "Indirect Light Multiplier" : 1 : ""
	clientSideEntity(boolean) [ group="Misc" ] : "Create as client-only entity" : 0 : "If set, the entity will spawn on client only."

	input SetLightBrightness(float) : ""
	input SetLightEnabled(boolean) : ""
	input TurnOn(void) : ""
	input TurnOff(void) : ""
	input Toggle(void) : ""
	input SetLightColor(color255) : ""
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// LightEntity
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Lighting ) editormodel( "models/editor/omni", lightModeTint, "0 255 192", "255 64 64" ) leansphere( "lightsourceradius" ) sphere( "range", 255, 255, 0 ) light() = ent_light : ""
[
	enabled(boolean) : "Enabled" : 1 : ""
	color(color255) : "Color" : "255 255 255" : ""
	brightness(float) : "Brightness" : 1 : ""
	range(float) : "Range" : 512 : "Distance range for light. 0=infinite"
	attenuation1(float) { group = "Rendering" } : "Linear Attenuation" : 0 : ""
	attenuation2(float) { group = "Rendering" } : "Quadratic Attenuation" : 1 : ""
	fademindist(float) { group = "Fade Distance" } : "Fade Distance Min" : -250 : "Distance at which the light starts to fade. (less than 0 = use fademaxdist)"
	fademaxdist(float) { group = "Fade Distance" } : "Fade Distance Max" : 1250 : "Maximum distance at which the light is visible. (0 = don't fade out)"
	fog_lighting(choices) : "Fog Lighting" : 0 : "Volumetric Fogging - How should light interact with volumetric fogging." =
	[
		0 : "None"
		1 : "Baked"
		2 : "Dynamic"
		3 : "Baked No Shadows"
		4 : "Dynamic No Shadows"
	]
	fogcontributionstrength(float) : "Fog Stength" : "1" : "Overrides how much the light affects the fog. (if enabled)"
	castshadows(choices) { group = "Shadows" } : "Cast Shadows" : 1 : "Whether this light casts shadows." =
	[
		0 : "No"
		1 : "Yes"
		2 : "Baked Only"
	]
	nearclipplane(float) { group = "Shadows" } : "Shadow Near Clip Plane" : "1" : "Distance for near clip plane for shadow map."
	rendertocubemaps(boolean) { group = "Rendering" } : "Render To Cubemaps" : 1 : "If true, this light renders into baked cube maps."
	priority(integer) { group = "Rendering" } : "Priority" : 0 : "When the number of visible lights exceeds the rendering budget, higher priority lights are chosen for rendering first."
	lightgroup(string) { group = "Rendering" } : "Light Group" :  : "Semicolon-delimited list of light groups to affect."
	lightsourceradius(float) { group = "Rendering" } : "Light Source Radius" : "2" : "The radius of the light source in game units."
	baked_light_indexing(boolean) { group = "Rendering" } : "Baked Light Indexing" : 1 : "Allows direct light to be indexed if baked. Indexed lights have per-pixel quality specular lighting and normal map response"
	pattern(string) { group = "Style" } : "Pattern" :  : "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
	style(choices) { group = "Style" } : "Style" : 0 : "" =
	[
		0 : "Normal"
		1 : "Flicker A"
		2 : "Slow Strong Pulse"
		3 : "Candle A"
		4 : "Fast Strobe"
		5 : "Gentle Pulse"
		6 : "Flicker B"
		7 : "Candle B"
		8 : "Candle C"
		9 : "Slow Strobe"
		10 : "Fluorescent Flicker"
		11 : "Slow Pulse No Black"
	]
	renderdiffuse(boolean) { group = "Rendering" } : "Render Diffuse" : 1 : "Whether the light should affect diffuse surfaces."
	renderspecular(choices) { group = "Rendering" } : "Render Specular" : 1 : "Whether the light should be visible in specular reflections." =
	[
		0 : "Off"
		1 : "On"
		2 : "Bake Into Cubemaps"
	]
	rendertransmissive(boolean) { group = "Rendering" } : "Render Transmissive" : 1 : ""
	directlight(choices) : "Direct Light" : 1 : "How direct lighting should be represented" =
	[
		0 : "None"
		1 : "Baked"
		2 : "Per Pixel"
	]
	indirectlight(choices) : "Indirect Light" : 1 : "How indirect lighting should be represented" =
	[
		0 : "None"
		1 : "Baked"
	]
	bouncescale(float) : "Indirect Light Multiplier" : 1 : ""

	input SetLightEnabled(boolean) : ""
	input TurnOn(void) : ""
	input TurnOff(void) : ""
	input Toggle(void) : ""
	input SetLightColor(color255) : ""
	input SetLightBrightness(float) : ""
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// NoiseTest
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Physics ) model() = noise_test : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// ThrusterEntity
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Physics ) model() = ent_thruster : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// UnlimitedBouncyBallEntity
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Physics ) model() = ent_unlimited_bouncyball : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// WheelEntity
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Physics ) model() = ent_wheel : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// Flying
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = weapon_flying : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// GravGun
//
@PointClass base(BaseProperties_sbox_nepqbox) = gravgun : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// PhysGun
//
@PointClass base(BaseProperties_sbox_nepqbox) = physgun : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// AK47
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/swb/css/ak47/css_w_rif_ak47.vmdl" ) = weapon_ak47 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// AUG
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_ang/w_css_rif_aug.vmdl" ) = weapon_aug : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// AutomaticCrossbow
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_crossbow/rust_crossbow.vmdl" ) = weapon_automaticcrossbow : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// AWP
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_awp/css_w_awp.vmdl" ) = weapon_awp : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// BoneKnife
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_boneknife/rust_boneknife.vmdl" ) = weapon_boneknife : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Crossbow
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_crossbow/rust_crossbow.vmdl" ) = weapon_crossbow : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Crowbar
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/hl2_crowbar/w_hl2_crowbar.vmdl" ) = weapon_crowbar : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// CWEPW
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_pumpshotgun/rust_pumpshotgun.vmdl" ) = weapon_cwep : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Deagle
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_deagle/css_w_pist_deagle.vmdl" ) = weapon_deagle : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Elites
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_elite/w_css_pist_elite_dropped.vmdl" ) = weapon_elite : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// FAMAS
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_famas/w_css_rif_famas.vmdl" ) = weapon_famas : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Fists
//
@PointClass base(BaseProperties_sbox_nepqbox) = weapon_fists : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// FiveSeven
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_fiveseven/w_css_pist_fiveseven.vmdl" ) = weapon_fiveseven : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Flashlight
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = weapon_flashlight : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// G3SG1
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_g3sg1/w_css_snip_g3sg1.vmdl" ) = weapon_g3sg1 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// GALIL
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_galil/w_css_rif_galil.vmdl" ) = weapon_galil : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Glock18
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_glock18/w_css_pist_glock18.vmdl" ) = weapon_glock : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// HL2Pistol
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/hl2_pistol/w_hl2_pistol.vmdl" ) = weapon_hl2_pistol : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Knife
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_knife/css_w_knife.vmdl" ) = weapon_knife : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// M249
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_m249/css_w_mach_m249para.vmdl" ) = weapon_m249 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// M3
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_super90/css_w_shot_m3super90.vmdl" ) = weapon_m3 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// M4A1
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_m4a1/css_w_m4a1.vmdl" ) = weapon_m4a1 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// MAC10
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/swb/css/mac10/css_w_smg_mac10.vmdl" ) = weapon_mac10 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// MP5
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_mp5/w_css_smg_mp5.vmdl" ) = weapon_mp5navy : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// NiceGun
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_pumpshotgun/rust_pumpshotgun.vmdl" ) = weapon_nicegun : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// P228
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_p228/w_css_pist_p228.vmdl" ) = weapon_p228 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// P90
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_p90/w_css_smg_p90.vmdl" ) = weapon_p90 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Pistol
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_pistol/rust_pistol.vmdl" ) = weapon_pistol : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// PumpShotgun
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_pumpshotgun/rust_pumpshotgun.vmdl" ) = weapon_pumpshotgun : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Python357
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "models/weapons/w_357.vmdl" ) = weapon_357 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// RPG
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/swb/explosives/rpg-7/swb_w_rpg7.vmdl" ) = weapon_rpg : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Scout
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_scout/w_css_snip_scout.vmdl" ) = weapon_scout : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// SG550
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_sg550/w_css_snip_sg550.vmdl" ) = weapon_sg550 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// SG552
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_sg552/w_css_rif_sg552.vmdl" ) = weapon_sg552 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Shotgun
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_shotgun/rust_shotgun.vmdl" ) = weapon_shotgun : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// SMG
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_smg/rust_smg.vmdl" ) = weapon_smg : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// SMGShotgun
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/rust_smg/rust_smg.vmdl" ) = weapon_smgshotgun : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TMP
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_tmp/w_css_smg_tmp.vmdl" ) = weapon_tmp : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// UMP45
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_ump45/w_css_smg_ump45.vmdl" ) = weapon_ump45 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// USP
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_usp/w_css_pist_usp.vmdl" ) = weapon_usp : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// XM1014
//
@PointClass base(BaseProperties_sbox_nepqbox) editormodel( "weapons/css_xm1014/w_css_shot_xm1014.vmdl" ) = weapon_xm1014 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// CarEntity
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Physics ) model() = ent_car : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// MelonCar
//
@PointClass base(BaseProperties_sbox_nepqbox) tags( Physics ) model() = ent_meloncar : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// NPCDummy
//
@PointClass base(BaseProperties_sbox_nepqbox) = npc_dummy : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// NPCDummyWontDie
//
@PointClass base(BaseProperties_sbox_nepqbox) = npc_dummy_wontdie : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// NPCFollow
//
@PointClass base(BaseProperties_sbox_nepqbox) = npc_follow : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// NPCWeaponTest
//
@PointClass base(BaseProperties_sbox_nepqbox) = npc_weapon_test : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// NPCWeaponTest2
//
@PointClass base(BaseProperties_sbox_nepqbox) = npc_weapon_test2 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// NPCZombie
//
@PointClass base(BaseProperties_sbox_nepqbox) = npc_zombie : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// NPCZombieSpeed
//
@PointClass base(BaseProperties_sbox_nepqbox) = npc_zombie_speed : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Tool
//
@PointClass base(BaseProperties_sbox_nepqbox) = weapon_tool : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Gamelib.DayNight.DayNightAmbience
//
@PointClass base(BaseProperties_sbox_nepqbox) iconsprite( "editor/snd_daynight.vmat" ) 
metadata
{
	entity_tool_name = "Ambience"
	entity_tool_group = "Day and Night"
}
= daynight_ambience : "An audio controller for when a looping sound should play at each point in the day"
[
	dawnambience(sound) : "Dawn Ambient Sound" :  : ""
	dayambience(sound) : "Day Ambient Sound" :  : ""
	duskambience(sound) : "Dusk Ambient Sound" :  : ""
	nightambience(sound) : "Night Ambient Sound" :  : ""
]

//
// Gamelib.DayNight.DayNightController
//
@PointClass base(BaseProperties_sbox_nepqbox) iconsprite( "editor/daynight_controller.vmat" ) 
metadata
{
	entity_tool_name = "Controller"
	entity_tool_group = "Day and Night"
}
= daynight_controller : "A way to set the colour based on the time of day, it will smoothly blend between each colour when the time has changed. Also enables the day night cycle using a \"light_environment\"."
[
	dawncolor(color255) : "Dawn Color" :  : ""
	dawnskycolor(color255) : "Dawn Sky Color" :  : ""
	daycolor(color255) : "Day Color" :  : ""
	dayskycolor(color255) : "Day Sky Color" :  : ""
	duskcolor(color255) : "Dusk Color" :  : ""
	duskskycolor(color255) : "Dusk Sky Color" :  : ""
	nightcolor(color255) : "Night Color" :  : ""
	nightskycolor(color255) : "Night Sky Color" :  : ""
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnBecomeNight(void) : ""
	output OnBecomeDusk(void) : ""
	output OnBecomeDawn(void) : ""
	output OnBecomeDay(void) : ""
]

//
// Gamelib.DayNight.DayNightProp
//
@PointClass base(BaseProperties_sbox_nepqbox) model() 
metadata
{
	entity_tool_name = "Material Prop"
	entity_tool_group = "Day and Night"
}
= daynight_prop : "Sets the skin of a model depending on if it's day time or night time, example: A street lamp turning on and night time then turning off in the morning"
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	daymaterialgroup(integer) : "Day Material Group" : 0 : ""
	nightmaterialgroup(integer) : "Night Material Group" : 1 : ""
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Gamelib.DayNight.DayNightSound
//
@PointClass base(BaseProperties_sbox_nepqbox) iconsprite( "editor/daynight_sound.vmat" ) 
metadata
{
	entity_tool_name = "Sound"
	entity_tool_group = "Day and Night"
}
= daynight_sound : "A way to play sounds during the day night cycle, this also allows you to play a looping sound between 2 time periods e.g. 5pm to 6pm. You can also set the sound to only place once."
[
	soundtoplay(sound) : "Sound To Play" :  : ""
	timetoplay(integer) : "Time To Play" : 12 : ""
	timetostop(integer) : "Time To Stop" : -1 : ""
	deleteonplay(boolean) : "Delete On Play" : 0 : ""
]

//
// Gamelib.DayNight.DayNightWindow
//
@SolidClass base(BaseProperties_sbox_nepqbox) tags( Dynamic ) 
metadata
{
	entity_tool_name = "Window Brush"
	entity_tool_group = "Day and Night"
}
= daynight_window : "A brush entity that will enable and disable at random times during the morning and night time"
[
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	enabledelay(float) : "Enable Delay Time" : "3" : ""
	disabledelay(float) : "Disable Delay Time" : "3" : ""
	enabled(boolean) : "Enabled" : 1 : "Whether this func_brush is visible/active at all"
	solid(boolean) : "Solid" : 1 : "Whether this func_brush has collisions"
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input DisableSolid(void) : "Make this func_brush non solid"
	input EnableSolid(void) : "Make this func_brush solid"
	input ToggleSolid(void) : "Toggle solidity of this func_brush"
	input Enable(void) : "Enable this func_brush, making it visible"
	input Disable(void) : "Disable this func_brush, making it invisible and non solid"
	input Toggle(void) : "Toggle this func_brush"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

